{"version":3,"file":"index.js","sources":["../../src/EventEmitter.ts","../../src/FEvent.ts","../../src/GlobalEmitter.ts","../../src/ObjectEvent.ts"],"sourcesContent":["/**\r\n * 事件属性名称常量\r\n */\r\nexport const EVENT_KEY = '__event__';\r\n\r\n/**\r\n * 事件派发器代理的对象\r\n */\r\nexport const EVENT_EMITTER_TARGET = '__event_emitter_target__';\r\n\r\n/**\r\n * 事件冒泡函数名称常量，冒泡的对象需要定义该名称的函数。\r\n *\r\n * function __event_bubble_function__(): any[];\r\n *\r\n * var bubbleObject: { __event_bubble_function__: () => any[] }\r\n */\r\nexport const EVENT_BUBBLE_FUNCTION = '__event_bubble_function__';\r\n\r\n/**\r\n * 事件派发器\r\n */\r\nexport class EventEmitter<T = any>\r\n{\r\n    private static targetMap = new Map<any, EventEmitter>();\r\n\r\n    /**\r\n     * 获取事件派发器\r\n     * @param target\r\n     */\r\n    static getEventEmitter(target: any)\r\n    {\r\n        console.assert(target !== undefined && target !== null, `被监听对象无法为undefined或者null！`);\r\n        if (target instanceof EventEmitter)\r\n        {\r\n            return target;\r\n        }\r\n        return this.targetMap.get(target);\r\n    }\r\n\r\n    /**\r\n     * 获取事件派发器，当没有找到对应派发器时，返回新建的事件派发器。\r\n     * @param target\r\n     */\r\n    static getOrCreateEventEmitter(target: any)\r\n    {\r\n        let eventEmitter = this.getEventEmitter(target);\r\n\r\n        if (!eventEmitter)\r\n        {\r\n            eventEmitter = new EventEmitter(target);\r\n        }\r\n        return eventEmitter;\r\n    }\r\n\r\n    constructor(target?: any)\r\n    {\r\n        if (target === undefined)\r\n        {\r\n            target = this;\r\n        }\r\n        console.assert(!EventEmitter.targetMap.has(target), `同一个 ${target} 对象无法对应两个 EventEmitter！`);\r\n        EventEmitter.targetMap.set(target, this);\r\n        this[EVENT_EMITTER_TARGET] = target;\r\n    }\r\n\r\n    /**\r\n     * 返回监听的事件类型列表。\r\n     */\r\n    eventNames<K extends keyof T & string>()\r\n    {\r\n        const names = Object.keys(this[EVENT_KEY]) as K[];\r\n\r\n        return names;\r\n    }\r\n\r\n    /**\r\n     * 返回指定事件类型的监听数量。\r\n     *\r\n     * @param type 事件的类型。\r\n     */\r\n    listenerCount<K extends keyof T & string>(type: K): number\r\n    {\r\n        return this[EVENT_KEY]?.[type]?.length || 0;\r\n    }\r\n\r\n    /**\r\n     * 监听一次事件后将会被移除\r\n     * @param type\t\t\t\t\t\t事件的类型。\r\n     * @param listener\t\t\t\t\t处理事件的侦听器函数。\r\n     * @param thisObject                listener函数作用域\r\n     * @param priority\t\t\t\t\t事件侦听器的优先级。数字越大，优先级越高。默认优先级为 0。\r\n     */\r\n    once<K extends keyof T & string>(type: K, listener: (event: Event<T[K]>) => void, thisObject?: any, priority = 0): this\r\n    {\r\n        this.on(type, listener, thisObject, priority, true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 派发事件\r\n     *\r\n     * 当事件重复流向一个对象时将不会被处理。\r\n     *\r\n     * @param e   事件对象\r\n     * @returns 返回事件是否被该对象处理\r\n     */\r\n    emitEvent<K extends keyof T & string>(e: Event<T[K]>)\r\n    {\r\n        // 是否为初次派发\r\n        const isEventStart = !e.target;\r\n\r\n        if (isEventStart)\r\n        {\r\n            // 初始化事件\r\n            e.target = e.target || null;\r\n            e.currentTarget = e.currentTarget || null;\r\n            e.isStop = e.isStop || false;\r\n            e.isStopBubbles = e.isStopBubbles || false;\r\n            e.targets = e.targets || [];\r\n            e.handles = e.handles || [];\r\n            e.targetsIndex = e.targetsIndex || 0;\r\n            e.targetsBubblesIndex = e.targetsBubblesIndex || 0;\r\n        }\r\n\r\n        const targets = e.targets;\r\n\r\n        if (targets.indexOf(this[EVENT_EMITTER_TARGET]) !== -1)\r\n        {\r\n            return false;\r\n        }\r\n        targets.push(this[EVENT_EMITTER_TARGET]);\r\n\r\n        //\r\n        let index = e.targetsIndex;\r\n\r\n        while (targets.length > index)\r\n        {\r\n            const n = targets.length;\r\n            // 派发事件\r\n\r\n            while (e.targetsIndex < n)\r\n            {\r\n                const eventEmitter = EventEmitter.getOrCreateEventEmitter(targets[e.targetsIndex++]);\r\n\r\n                eventEmitter.handleEvent(e); // 传递到其它对象中去，将会增加 targets 的长度。\r\n            }\r\n            index = e.targetsIndex;\r\n            if (isEventStart) // 统一在派发事件入口处理冒泡\r\n            {\r\n                // 处理冒泡\r\n                if (e.bubbles && !e.isStopBubbles)\r\n                {\r\n                    while (e.targetsBubblesIndex < n)\r\n                    {\r\n                        const eventEmitter = EventEmitter.getOrCreateEventEmitter(targets[e.targetsBubblesIndex++]);\r\n\r\n                        eventEmitter.handelEventBubbles(e); // 冒泡到其它对象中去，将会增加 targets 的长度。\r\n                    }\r\n                    index = e.targetsBubblesIndex;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 将事件调度到事件流中. 事件目标是对其调用 emitEvent() 方法的 Event 对象。\r\n     * @param type                      事件的类型。类型区分大小写。\r\n     * @param data                      事件携带的自定义数据。\r\n     * @param bubbles                   表示事件是否为冒泡事件。如果事件可以冒泡，则此值为 true；否则为 false。\r\n     */\r\n    emit<K extends keyof T & string>(type: K, data?: T[K], bubbles = false)\r\n    {\r\n        const e: Event<T[K]> = { type, data, bubbles, target: null, currentTarget: null, isStop: false, isStopBubbles: false, targets: [], handles: [] };\r\n\r\n        return this.emitEvent(e);\r\n    }\r\n\r\n    /**\r\n     * 检查 Event 对象是否为特定事件类型注册了任何侦听器.\r\n     *\r\n     * @param type\t\t事件的类型。\r\n     * @return \t\t\t如果指定类型的侦听器已注册，则值为 true；否则，值为 false。\r\n     */\r\n    has<K extends keyof T & string>(type: K): boolean\r\n    {\r\n        return this.listenerCount(type) > 0;\r\n    }\r\n\r\n    /**\r\n     * 为监听对象新增指定类型的事件监听。\r\n     *\r\n     * @param type\t\t\t\t\t\t事件的类型。\r\n     * @param listener\t\t\t\t\t处理事件的监听器函数。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     * @param priority\t\t\t\t\t事件监听器的优先级。数字越大，优先级越高。默认为0。\r\n     * @param once                      值为true时在监听一次事件后该监听器将被移除。默认为false。\r\n     */\r\n    on<K extends keyof T & string>(type: K, listener: (event: Event<T[K]>) => void, thisObject?: any, priority = 0, once = false): this\r\n    {\r\n        if (listener === null) return this;\r\n\r\n        let objectListener: ObjectListener = this[EVENT_KEY];\r\n\r\n        if (!objectListener)\r\n        {\r\n            objectListener = { __anyEventType__: [] };\r\n            this[EVENT_KEY] = objectListener;\r\n        }\r\n\r\n        thisObject = thisObject || this;\r\n        const listeners: ListenerVO[] = objectListener[type] = objectListener[type] || [];\r\n\r\n        let i = 0;\r\n\r\n        for (i = 0; i < listeners.length; i++)\r\n        {\r\n            const element = listeners[i];\r\n\r\n            if (element.listener === listener && element.thisObject === thisObject)\r\n            {\r\n                listeners.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < listeners.length; i++)\r\n        {\r\n            const element = listeners[i];\r\n\r\n            if (priority > element.priority)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        listeners.splice(i, 0, { listener, thisObject, priority, once });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 移除监听\r\n     *\r\n     * @param type\t\t\t\t\t\t事件的类型。可选。该值为空时所有被监听对象上的监听均将被移除。\r\n     * @param listener\t\t\t\t\t要删除的监听器对象。可选。该值为空时所有指定类型的监听均将被移除。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     */\r\n    off<K extends keyof T & string>(type?: K, listener?: (event: Event<T[K]>) => void, thisObject?: any): this\r\n    {\r\n        if (!type)\r\n        {\r\n            this[EVENT_KEY] = undefined;\r\n            return;\r\n        }\r\n\r\n        const objectListener: ObjectListener = this[EVENT_KEY];\r\n\r\n        if (!objectListener) return;\r\n\r\n        if (!listener)\r\n        {\r\n            delete objectListener[type];\r\n            return;\r\n        }\r\n\r\n        thisObject = thisObject || this;\r\n\r\n        const listeners = objectListener[type];\r\n\r\n        if (listeners)\r\n        {\r\n            for (let i = listeners.length - 1; i >= 0; i--)\r\n            {\r\n                const element = listeners[i];\r\n\r\n                if (element.listener === listener && element.thisObject === thisObject)\r\n                {\r\n                    listeners.splice(i, 1);\r\n                }\r\n            }\r\n            if (listeners.length === 0)\r\n            {\r\n                delete objectListener[type];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 移除所有监听\r\n     *\r\n     * @param type\t\t\t\t\t\t事件的类型。可选。该值为空时所有被监听对象上的监听均将被移除。\r\n     */\r\n    offAll<K extends keyof T & string>(type?: K)\r\n    {\r\n        this.off(type);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 监听对象的任意事件，该对象的任意事件都将触发该监听器的调用。\r\n     *\r\n     * @param listener                  处理事件的监听器函数。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     * @param priority                  事件监听器的优先级。数字越大，优先级越高。默认为0。\r\n     * @param once                      值为true时在监听一次事件后该监听器将被移除。默认为false。\r\n     */\r\n    onAny<K extends keyof T & string>(listener: (event: Event<T[K]>) => void, thisObject?: any, priority = 0, once = false)\r\n    {\r\n        let objectListener: ObjectListener = this[EVENT_KEY];\r\n\r\n        if (!objectListener)\r\n        {\r\n            objectListener = { __anyEventType__: [] };\r\n            this[EVENT_KEY] = objectListener;\r\n        }\r\n\r\n        const listeners: ListenerVO[] = objectListener.__anyEventType__;\r\n\r\n        let i = 0;\r\n\r\n        for (i = 0; i < listeners.length; i++)\r\n        {\r\n            const element = listeners[i];\r\n\r\n            if (element.listener === listener && element.thisObject === thisObject)\r\n            {\r\n                listeners.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < listeners.length; i++)\r\n        {\r\n            const element = listeners[i];\r\n\r\n            if (priority > element.priority)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        listeners.splice(i, 0, { listener, thisObject, priority, once });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 移除监听对象的任意事件。\r\n     *\r\n     * @param listener                  处理事件的监听器函数。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     */\r\n    offAny<K extends keyof T & string>(listener?: (event: Event<T[K]>) => void, thisObject?: any)\r\n    {\r\n        const objectListener: ObjectListener = this[EVENT_KEY];\r\n\r\n        if (!listener)\r\n        {\r\n            if (objectListener)\r\n            {\r\n                objectListener.__anyEventType__.length = 0;\r\n            }\r\n            return;\r\n        }\r\n        if (objectListener)\r\n        {\r\n            const listeners = objectListener.__anyEventType__;\r\n\r\n            for (let i = listeners.length - 1; i >= 0; i--)\r\n            {\r\n                const element = listeners[i];\r\n\r\n                if (element.listener === listener && element.thisObject === thisObject)\r\n                {\r\n                    listeners.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 处理事件\r\n     * @param e 事件\r\n     */\r\n    protected handleEvent<K extends keyof T & string>(e: Event<T[K]>)\r\n    {\r\n        // 设置目标\r\n        e.target = e.target || this[EVENT_EMITTER_TARGET];\r\n        e.currentTarget = this[EVENT_EMITTER_TARGET];\r\n        //\r\n        const objectListener: ObjectListener = this[EVENT_KEY];\r\n\r\n        if (!objectListener) return;\r\n\r\n        let listeners: ListenerVO[] = objectListener[e.type];\r\n\r\n        if (listeners)\r\n        {\r\n            // 遍历调用事件回调函数\r\n            const listeners0 = listeners.concat();\r\n\r\n            let i = 0;\r\n\r\n            for (i = 0; i < listeners0.length && !e.isStop; i++)\r\n            {\r\n                listeners0[i].listener.call(listeners0[i].thisObject, e);// 此处可能会删除当前事件，所以上面必须拷贝\r\n                e.handles.push(listeners0[i]);\r\n            }\r\n            for (i = listeners.length - 1; i >= 0; i--)\r\n            {\r\n                if (listeners[i].once)\r\n                {\r\n                    listeners.splice(i, 1);\r\n                }\r\n            }\r\n            if (listeners.length === 0)\r\n            {\r\n                delete objectListener[e.type];\r\n            }\r\n        }\r\n        // Any_EVENT_Type\r\n        listeners = objectListener.__anyEventType__;\r\n        if (listeners)\r\n        {\r\n            // 遍历调用事件回调函数\r\n            const listeners0 = listeners.concat();\r\n\r\n            for (let i = 0; i < listeners0.length && !e.isStop; i++)\r\n            {\r\n                listeners0[i].listener.call(listeners0[i].thisObject, e);// 此处可能会删除当前事件，所以上面必须拷贝\r\n            }\r\n            for (let i = listeners.length - 1; i >= 0; i--)\r\n            {\r\n                if (listeners[i].once)\r\n                {\r\n                    listeners.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理事件冒泡\r\n     * @param e 事件\r\n     */\r\n    protected handelEventBubbles<K extends keyof T & string>(e: Event<T[K]>)\r\n    {\r\n        if (typeof this[EVENT_EMITTER_TARGET]?.[EVENT_BUBBLE_FUNCTION] === 'function')\r\n        {\r\n            const bubbleTargets: any[] = this[EVENT_EMITTER_TARGET][EVENT_BUBBLE_FUNCTION]();\r\n\r\n            bubbleTargets.forEach((v) =>\r\n            {\r\n                if (v !== undefined && e.targets.indexOf(v) === -1)\r\n                {\r\n                    e.targets.push(v);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\ninterface ObjectListener\r\n{\r\n    [type: string]: ListenerVO[];\r\n    __anyEventType__: ListenerVO[];\r\n}\r\n\r\n/**\r\n     * 事件\r\n     */\r\nexport interface Event<T>\r\n{\r\n    /**\r\n     * 事件的类型。类型区分大小写。\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * 事件携带的自定义数据\r\n     */\r\n    data: T;\r\n\r\n    /**\r\n     * 事件目标。\r\n     */\r\n    target?: any;\r\n\r\n    /**\r\n     * 当前正在使用某个事件监听器处理 Event 对象的对象。\r\n     */\r\n    currentTarget?: any;\r\n\r\n    /**\r\n     * 表示事件是否为冒泡事件。如果事件可以冒泡，则此值为 true；否则为 false。\r\n     */\r\n    bubbles: boolean;\r\n\r\n    /**\r\n     * 是否停止冒泡\r\n     */\r\n    isStopBubbles?: boolean;\r\n\r\n    /**\r\n     * 是否停止处理事件监听器\r\n     */\r\n    isStop?: boolean;\r\n\r\n    /**\r\n     * 事件流过的对象列表，事件路径\r\n     */\r\n    targets?: any[];\r\n\r\n    /**\r\n     * 当前事件流到targets的索引\r\n     */\r\n    targetsIndex?: number;\r\n\r\n    /**\r\n     * 当前事件冒泡流到targets的索引\r\n     */\r\n    targetsBubblesIndex?: number;\r\n\r\n    /**\r\n     * 处理列表\r\n     */\r\n    handles?: ListenerVO[];\r\n}\r\n\r\n/**\r\n * 监听数据\r\n */\r\ninterface ListenerVO\r\n{\r\n    /**\r\n     * 监听函数\r\n     */\r\n    listener: (event: Event<any>) => void;\r\n    /**\r\n     * 监听函数作用域\r\n     */\r\n    thisObject: any;\r\n    /**\r\n     * 优先级\r\n     */\r\n    priority: number;\r\n    /**\r\n     * 是否只监听一次\r\n     */\r\n    once: boolean;\r\n}\r\n","import { Event, EventEmitter } from './EventEmitter';\r\n\r\n/**\r\n * 可针对（除undefined、null、Symbol外）的任意对象（0, 1, true, false, \"1\", {}）派发事件\r\n */\r\nexport class FEvent\r\n{\r\n    /**\r\n     * Return an array listing the events for which the emitter has registered\r\n     * listeners.\r\n     */\r\n    eventNames(obj: any)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        const names = EventEmitter.getEventEmitter(obj)?.eventNames() || [];\r\n\r\n        return names;\r\n    }\r\n\r\n    /**\r\n     * Return the number of listeners listening to a given event.\r\n     */\r\n    listenerCount(obj: any, type: string)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        const count = EventEmitter.getEventEmitter(obj)?.listenerCount(type) || 0;\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * 监听一次事件后将会被移除\r\n     * @param type\t\t\t\t\t\t事件的类型。\r\n     * @param listener\t\t\t\t\t处理事件的监听器函数。\r\n     * @param thisObject                listener函数作用域\r\n     * @param priority\t\t\t\t\t事件监听器的优先级。数字越大，优先级越高。默认为0。\r\n     */\r\n    once(obj: Object, type: string, listener: (event: Event<any>) => void, thisObject = null, priority = 0)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        EventEmitter.getOrCreateEventEmitter(obj).once(type, listener, thisObject, priority);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 派发事件\r\n     *\r\n     * 当事件重复流向一个对象时将不会被处理。\r\n     *\r\n     * @param e                 事件对象。\r\n     * @returns                 返回事件是否被该对象处理。\r\n     */\r\n    emitEvent(obj: Object, e: Event<any>)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        const result = EventEmitter.getOrCreateEventEmitter(obj).emitEvent(e) || false;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 将事件调度到事件流中. 事件目标是对其调用 emitEvent() 方法的 IEvent 对象。\r\n     * @param type                      事件的类型。类型区分大小写。\r\n     * @param data                      事件携带的自定义数据。\r\n     * @param bubbles                   表示事件是否为冒泡事件。如果事件可以冒泡，则此值为 true；否则为 false。\r\n     */\r\n    emit(obj: Object, type: string, data?: any, bubbles = false)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        const result = EventEmitter.getOrCreateEventEmitter(obj).emit(type, data, bubbles) || false;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 检查 被监听对象 是否为特定事件类型注册了任何监听器.\r\n     *\r\n     * @param obj                       被监听对象。\r\n     * @param type\t\t                事件的类型。\r\n     * @return \t\t\t                如果指定类型的监听器已注册，则值为 true；否则，值为 false。\r\n     */\r\n    has(obj: Object, type: string)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        const result = EventEmitter.getEventEmitter(obj)?.has(type) || false;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 为监听对象新增指定类型的事件监听。\r\n     *\r\n     * @param obj                       被监听对象。\r\n     * @param type\t\t\t\t\t\t事件的类型。\r\n     * @param listener\t\t\t\t\t处理事件的监听器函数。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     * @param priority\t\t\t\t\t事件监听器的优先级。数字越大，优先级越高。默认为0。\r\n     * @param once                      值为true时在监听一次事件后该监听器将被移除。默认为false。\r\n     */\r\n    on(obj: Object, type: string, listener: (event: Event<any>) => any, thisObject?: any, priority = 0, once = false)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        EventEmitter.getOrCreateEventEmitter(obj).on(type, listener, thisObject, priority, once);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 移除监听\r\n     *\r\n     * @param obj                       被监听对象。\r\n     * @param type\t\t\t\t\t\t事件的类型。可选。该值为空时所有被监听对象上的监听均将被移除。\r\n     * @param listener\t\t\t\t\t要删除的监听器对象。可选。该值为空时所有指定类型的监听均将被移除。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     */\r\n    off(obj: Object, type?: string, listener?: (event: Event<any>) => any, thisObject?: any)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        EventEmitter.getEventEmitter(obj)?.off(type, listener, thisObject);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove all listeners, or those of the specified event.\r\n     */\r\n    offAll(obj: any, type?: string)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        EventEmitter.getEventEmitter(obj)?.offAll(type);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 监听对象的任意事件，该对象的任意事件都将触发该监听器的调用。\r\n     *\r\n     * @param obj                       被监听对象。\r\n     * @param listener                  处理事件的监听器函数。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     * @param priority                  事件监听器的优先级。数字越大，优先级越高。默认为0。\r\n     * @param once                      值为true时在监听一次事件后该监听器将被移除。默认为false。\r\n     */\r\n    onAny(obj: Object, listener: (event: Event<any>) => void, thisObject?: any, priority = 0, once = false)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        EventEmitter.getOrCreateEventEmitter(obj).onAny(listener, thisObject, priority, once);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 移除监听对象的任意事件。\r\n     *\r\n     * @param obj                       被监听对象。\r\n     * @param listener                  处理事件的监听器函数。\r\n     * @param thisObject                监听器的上下文。可选。\r\n     */\r\n    offAny(obj: Object, listener?: (event: any) => void, thisObject?: any)\r\n    {\r\n        console.assert(obj !== undefined && obj !== null, `被监听对象无法为undefined或者null！`);\r\n        EventEmitter.getEventEmitter(obj)?.offAny(listener, thisObject);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 初始化事件对象\r\n     *\r\n     * @param type                      事件的类型。类型区分大小写。\r\n     * @param data                      事件携带的自定义数据。\r\n     * @param bubbles                   表示事件是否为冒泡事件。如果事件可以冒泡，则此值为 true；否则为 false。\r\n     */\r\n    makeEvent<T>(type: string, data: T, bubbles = false): Event<T>\r\n    {\r\n        return { type, data, bubbles };\r\n    }\r\n}\r\n\r\n/**\r\n * 事件\r\n */\r\nexport const event = new FEvent();\r\n","import { EventEmitter } from './EventEmitter';\r\n\r\n/**\r\n * 全局事件\r\n */\r\nexport const globalEmitter = new EventEmitter<GlobalEvents>();\r\n\r\n/**\r\n * 事件列表\r\n */\r\nexport interface GlobalEvents\r\n{\r\n    /**\r\n     * shader资源发生变化\r\n     */\r\n    'asset.shaderChanged'\r\n    /**\r\n     * 脚本发生变化\r\n     */\r\n    'asset.scriptChanged'\r\n    /**\r\n     * 图片资源发生变化\r\n     */\r\n    'asset.imageAssetChanged': { url: string }\r\n    /**\r\n     * 解析出资源\r\n     */\r\n    'asset.parsed'\r\n    /**\r\n     * 删除文件\r\n     */\r\n    'fs.delete': string;\r\n    /**\r\n     * 写文件\r\n     */\r\n    'fs.write': string;\r\n}\r\n","import { Event } from './EventEmitter';\r\nimport { event } from './FEvent';\r\n\r\n/**\r\n * 只针对Object的事件\r\n */\r\nexport const objectevent: ObjectEventDispatcher<Object, ObjectEventType> = event;\r\n\r\n/**\r\n * 用于适配不同对象对于的事件\r\n */\r\nexport interface ObjectEventDispatcher<O, T>\r\n{\r\n    once<K extends keyof T>(target: O, type: K, listener: (event: Event<T[K]>) => void, thisObject?: any, priority?: number): this;\r\n    emit<K extends keyof T>(target: O, type: K, data?: T[K], bubbles?: boolean): boolean;\r\n    has<K extends keyof T>(target: O, type: K): boolean;\r\n    on<K extends keyof T>(target: O, type: K, listener: (event: Event<T[K]>) => void, thisObject?: any, priority?: number, once?: boolean): this;\r\n    off<K extends keyof T>(target: O, type?: K, listener?: (event: Event<T[K]>) => void, thisObject?: any): this;\r\n}\r\n\r\n/**\r\n * Object 事件类型\r\n */\r\nexport interface ObjectEventType\r\n{\r\n    /**\r\n     * 属性值变化\r\n     */\r\n    propertyValueChanged: { property: string, oldValue: any, newValue: any };\r\n}\r\n"],"names":["const","let","eventEmitter","element","listeners0","i"],"mappings":"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"}